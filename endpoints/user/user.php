<?php
namespace DulliAG\API;
require_once "C:/xampp/htdocs/endpoints/user/nanoid/Client.php";
use Hidehalo\Nanoid\Client;

class User 
{
  public $sqlPHP = "C:/xampp/htdocs/endpoints/sql.php";
  public $alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  public $size = 16;

  public function register(string $name, string $surname, string $email, string $password, string $adress, int $plz, string $place, string $telNumber)
  {
    require $this->sqlPHP;
    
    $userExist = $this->exist($email);
    if (!$userExist['registered']) {
      $hashedPassword = hash("md5", $password);
      /**
      * API-Key generated by NanoID
      * https://zelark.github.io/nano-id-cc/
      * ~1 thousand years needed, in order to have a 1% probability of at least one collision.
      * @ 1000 ID/s per second
      */
      $client = new Client();
      $apiKey = $client->formattedId($this->alphabet, $this->size);
      $insert = $con->prepare("INSERT INTO `cshare_user` (name, surname, email, password, adress, plz, place, telNumber, apiKey) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
      $insert->bind_param("sssssisss", $name, $surname, $email, $hashedPassword, $adress, $plz, $place, $telNumber, $apiKey);
      $insert->execute();
      return array('inserted_id' => $insert->insert_id, 'error' => $insert->error == "" ? null : $insert->error);
    } else {
      return array('email' => $email, 'error' => 'auth/user-already-exist');
    }

    $insert->close();
    $con->close();
  }

  public function checkCredentials(string $email, string $password)
  {
    require $this->sqlPHP;

    $userExist = $this->exist($email);
    if ($userExist['registered']) {
      $hashedPassword = hash("md5", $password);
      $select = $con->query("SELECT `userId`, `email`, `apiKey` FROM `cshare_user` WHERE `email`='".$email."' AND `password`='".$hashedPassword."'");
      $result = $select->num_rows;
      if ($result == 1) {
        while ($data = $select->fetch_assoc()) {
          session_start();
          $userId = $data['userId'];
          $username = $data['email'];
          $apiKey = $data['apiKey'];
          $_SESSION['login'] = array('userId' => $userId, 'email' => $email, 'apiKey' => $apiKey);
        }
        return array('loggedIn' => true, 'email' => $email, 'error' => null);
      } else {
      return array('loggedIn' => false, 'email' => $email, 'error' => 'auth/password-invalid');
      }
    } else {
      return array('email' => $email, 'error' => 'auth/user-not-found');
    }

    $select->close();
    $con->close();
  }

  public function destroySession(string $redirectTo)
  {
    session_start();
    session_destroy();
    header("Location: ".$redirectTo);
  }

  public function exist(string $email)
  {
    require $this->sqlPHP;

    $select = $con->query("SELECT `userId` FROM `cshare_user` WHERE `email`='".$email."'");
    $result = $select->num_rows;

    return array('email' => $email, 'registered' => $result == 1 ? true : false);
    $select->close();
    $con->close();
  }
}
